# This option sets the 'guest' and 'host' memory parameters
# to the same value. In all other cases the 'memory' option
# should be used instead.
megs: 32  # MB

# The ROM BIOS controls what the PC does when it first powers on.
# Normally, you can use a precompiled BIOS in the source or binary
# distribution called BIOS-bochs-latest. The default ROM BIOS is
# usually loaded starting at address 0xfffe0000, and it is exactly
# 128k long. The legacy version of the Bochs BIOS is usually loaded
# starting at address 0xffff0000, and it is exactly 64k long. You
# can use the environment variable $BXSHARE to specify the location
# of the BIOS. The usage of external large BIOS images (up to 512k)
# at memory top is now supported, but we still recommend to use the
# BIOS distributed with Bochs. The start address is optional, since
# it can be calculated from image size. The Bochs BIOS currently
# supports only the option "fastboot" to skip the boot menu delay.
romimage: file=/usr/local/share/bochs/BIOS-bochs-latest,options=fastboot
# This tells Bochs what VGA ROM BIOS to load (at 0xC0000).
vgaromimage: file=/usr/local/share/bochs/VGABIOS-elpin-2.40


# Floppya is the first drive, and floppyb is the second drive.
# If you're booting from a floppy, floppya should point to a
# bootable disk. To read from a disk image, write the name of
# the image file. In many operating systems Bochs can read
# directly from a raw floppy drive. For raw disk access, use
# the device name (Unix systems) or the drive letter and a colon
# (Windows systems).

# Following floppy media types are supported: 2_88, 1_44, 1_2,
# 720k, 360k, 320k, 180k, 160k, as well as "image" to let Bochs
# auto-detect the type of floppy media (does only work with images,
# not with raw floppy drives). In that case the size must match
# one of the supported types.

# You can set the initial status of the media to ejected or inserted.
# Usually you will want to use inserted.

# The parameter 'type' can be used to enable the floppy drive without
# media and status specified. Usually the drive type is set up based
# on the media type.

# The optional parameter 'write_protected' can be used to control
# the media write protect switch. By default it is turned off.
floppya: 1_44=a.img, status=inserted

# This defines the boot sequence. You can specify up to 3 boot drives,
# which can be 'floppy', 'disk', 'cdrom' or 'network' (boot ROM).
# Legacy 'a' and 'c' are also supported.
boot: floppy
# Give the path of the log file you'd like Bochs debug and misc.
# verbiage to be to be written to. If you don't use this option or
# set the filename to '-' the output is written to the console.
# If you really don't want it, make it "/dev/null" (Unix) or "nul"
# (win32). :^(
log: bochs_log.log


# This defines parameters for the emulated mouse type, the initial
# status of the mouse capture and the runtime method to toggle it.

# type:
# With the mouse type option you can select the type of mouse to
# emulate. The default value is 'ps2'. The other choices are 'imps2'
# (wheel mouse on PS/2), 'serial', 'serial_wheel', 'serial_msys'
# (one com port requires setting 'mode=mouse', see com option)
# 'inport' and 'bus' (if present). To connect a mouse to a USB port,
# see the usb_uhci, 'usb_ohci', 'usb_ehci' or 'usb_xhci' options
# (requires PCI and USB support).

# enabled:
# The Bochs gui creates mouse "events" unless the 'enabled' option
# is set to 0. The hardware emulation itself is not disabled by this.
# Unless you have a particular reason for enabling the mouse by
# default, it is recommended that you leave it off. You can also
# toggle the mouse usage at runtime (see headerbar and the 'toggle'
# option below).

# toggle:
# The default method to toggle the mouse capture at runtime is to
# press the CTRL key and the middle mouse button ('ctrl+mbutton').
# This option allows to change the method to 'ctrl+f10' (like DOSBox)
# or 'ctrl+alt' (like QEMU) or 'f12'.
mouse: enabled=0


# This defines parameters related to the emulated keyboard.

# type
# Type of keyboard return by a "identify keyboard" command to the
# keyboard controller. It must be one of "xt", "at" or "mf".
# Defaults to "mf". It should be ok for almost everybody. A known
# exception is french macs, that do have a "at"-like keyboard.

# serial_delay
# Approximate time in microseconds that it takes one character to
# be transferred from the keyboard to controller over the serial path.

# paste_delay
# Approximate time in microseconds between attempts to paste
# characters to the keyboard controller. This leaves time for
# the guest os to deal with the flow of characters. The ideal
# setting depends on how your operating system processes characters.
# The default of 100000 usec (.1 seconds) was chosen because it
# works consistently in Windows.

# If your OS is losing characters during a paste, increase the
# paste delay until it stops losing characters.

# keymap
# This enables a remap of a physical localized keyboard to a
# virtualized us keyboard, as the PC architecture expects.

# Keyboard mapping is available for the display libraries x, sdl
# (Linux port) and wx (GTK port). For SDL you have to use keymaps
# designed for SDL, the wxWidgets GUI uses the keymaps for X11.

# user_shortcut
# This defines the keyboard shortcut to be sent when you press the
# "user" button in the headerbar. The shortcut string is a
# combination of maximum 3 key names (listed below) separated with
# a '-' character.

# Valid key names:
# "alt", "bksl", "bksp", "ctrl", "del", "down", "end", "enter",
# "esc", "f1", ... "f12", "home", "ins", "left", "menu", "minus",
# "pgdwn", "pgup", "plus", "power", "print", "right", "scrlck",
# "shift", "space", "tab", "up" and "win".

# Example:
# keyboard: type=mf, serial_delay=200, paste_delay=100000
# keyboard: keymap=gui/keymaps/x11-pc-de.map
# keyboard: user_shortcut=ctrl-alt-del

keyboard: keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map
